{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "ExampleDashmicronautDashjavaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/example-micronaut-java-dev-example-micronaut-java"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "example-micronaut-java",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/example-micronaut-java-dev-example-micronaut-java:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/example-micronaut-java-dev-example-micronaut-java:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "example-micronaut-java",
              "dev",
              "us-east-1",
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ExampleDashmicronautDashjavaLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/example-micronaut-java/dev/1539956692090-2018-10-19T13:44:52.090Z/micronaut-java-0.1-all.jar"
        },
        "FunctionName": "example-micronaut-java-dev-example-micronaut-java",
        "Handler": "io.micronaut.function.aws.MicronautRequestStreamHandler",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "java8",
        "Timeout": 6
      },
      "DependsOn": [
        "ExampleDashmicronautDashjavaLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "ExampleDashmicronautDashjavaLambdaVersionbhWIX5hvKW8yW8S5HlbAkCyTWMeGVbEhCLv4YfcudZY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExampleDashmicronautDashjavaLambdaFunction"
        },
        "CodeSha256": "Hupv2sZBJB9REAvg2KyVgBodl+N0XIgsZl4mO08X2FE="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-example-micronaut-java",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceExampleDashmicronautDashjava": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "example-micronaut-java",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodExampleDashmicronautDashjavaGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceExampleDashmicronautDashjava"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ExampleDashmicronautDashjavaLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "\n    #set( $body = $input.json(\"$\") )\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  ",
            "application/x-www-form-urlencoded": "\n    #define( $body )\n      {\n      #foreach( $token in $input.path('$').split('&') )\n        #set( $keyVal = $token.split('=') )\n        #set( $keyValSize = $keyVal.size() )\n        #if( $keyValSize >= 1 )\n          #set( $key = $util.escapeJavaScript($util.urlDecode($keyVal[0])) )\n          #if( $keyValSize >= 2 )\n            #set($val = $util.escapeJavaScript($util.urlDecode($keyVal[1])).replaceAll(\"\\\\'\",\"'\"))\n          #else\n            #set( $val = '' )\n          #end\n          \"$key\": \"$val\"#if($foreach.hasNext),#end\n        #end\n      #end\n      }\n    #end\n\n    \n  #define( $loop )\n    {\n    #foreach($key in $map.keySet())\n        #set( $k = $util.escapeJavaScript($key) )\n        #set( $v = $util.escapeJavaScript($map.get($key)).replaceAll(\"\\\\'\", \"'\") )\n        \"$k\":\n          \"$v\"\n          #if( $foreach.hasNext ) , #end\n    #end\n    }\n  #end\n\n  {\n    \"body\": $body,\n    \"method\": \"$context.httpMethod\",\n    \"principalId\": \"$context.authorizer.principalId\",\n    \"stage\": \"$context.stage\",\n\n    \"cognitoPoolClaims\" : {\n       \n       \"sub\": \"$context.authorizer.claims.sub\"\n    },\n\n    #set( $map = $context.authorizer )\n    \"enhancedAuthContext\": $loop,\n\n    #set( $map = $input.params().header )\n    \"headers\": $loop,\n\n    #set( $map = $input.params().querystring )\n    \"query\": $loop,\n\n    #set( $map = $input.params().path )\n    \"path\": $loop,\n\n    #set( $map = $context.identity )\n    \"identity\": $loop,\n\n    #set( $map = $stageVariables )\n    \"stageVariables\": $loop\n  }\n\n  "
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": "",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 400,
              "SelectionPattern": "[\\s\\S]*\\[400\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 401,
              "SelectionPattern": "[\\s\\S]*\\[401\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 403,
              "SelectionPattern": "[\\s\\S]*\\[403\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 404,
              "SelectionPattern": "[\\s\\S]*\\[404\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 422,
              "SelectionPattern": "[\\s\\S]*\\[422\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 500,
              "SelectionPattern": "[\\s\\S]*(Process\\s?exited\\s?before\\s?completing\\s?request|\\[500\\])[\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 502,
              "SelectionPattern": "[\\s\\S]*\\[502\\][\\s\\S]*",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            },
            {
              "StatusCode": 504,
              "SelectionPattern": "([\\s\\S]*\\[504\\][\\s\\S]*)|(^[Task timed out].*)",
              "ResponseParameters": {
                "method.response.header.Content-Type": "'application/json'"
              },
              "ResponseTemplates": {
                "application/json": "$input.path('$')"
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 400
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 401
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 403
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 404
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 422
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 500
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 502
          },
          {
            "ResponseParameters": {
              "method.response.header.Content-Type": true
            },
            "ResponseModels": {},
            "StatusCode": 504
          }
        ]
      }
    },
    "ApiGatewayDeployment1539956692225": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodExampleDashmicronautDashjavaGet"
      ]
    },
    "ExampleDashmicronautDashjavaLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExampleDashmicronautDashjavaLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Join": [
            "",
            [
              "apigateway.",
              {
                "Ref": "AWS::URLSuffix"
              }
            ]
          ]
        },
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "ExampleDashmicronautDashjavaLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExampleDashmicronautDashjavaLambdaVersionbhWIX5hvKW8yW8S5HlbAkCyTWMeGVbEhCLv4YfcudZY"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.us-east-1.",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}